[
  {
    "id": "Initial test",
    "description": "Return a default object.",
    "group": "Beginner",
    "suite": [
      "describe('Initial test.', function() {",
        "it('should have two public objects', function() {",
          "expect(Object.keys($results).length).toEqual(2);",
        "});",

        "it('should have a publicProperty property that is null', function() {",
          "expect($results.publicProperty).toBeNull();",
        "});",

        "it('should have a publicMethod function that returns null', function() {",
          "expect($results.publicMethod.call(this)).toBeNull();",
        "});",
      "});"
    ]
  },
  {
    "id": "Sum of all arguments",
    "group": "Beginner",
    "description": "Return a function that returns the sum of its argument values.",
    "suite": [
      "describe('Sum of all arguments.', function() {",
        "var add = $results;",

        "it('should add two or more numbers', function() {",
          "expect(add(7)).toEqual(7);",
          "expect(add(5, 6)).toEqual(11);",
          "expect(add(1, 2, 3)).toEqual(6);",
          "expect(add(1, 2, 3, 4)).toEqual(10);",
        "});",

        "it('should ignore objects, arrays, and strings', function() {",
          "expect(add({}, [], '', 5, 6)).toEqual(11);",
        "});",
      "});"
    ]
  },
  {
    "id": "Test 3",
    "group": "Intermediate",
    "description": "Nested in here.",
    "suite": [
      "describe('Third test.', function() {",
        "it('should not have a nonexistent property (produces error)', function() {",
          "expect($results.nonexistentProperty).toBeDefined();",
        "});",
      "});"
    ]
  },
  {
    "id": "Test 4",
    "group": "Functional programming",
    "description": "map/reduce"
  },
  {
    "id": "Test 5",
    "group": "jQuery",
    "description": "Selectors."
  }
]
